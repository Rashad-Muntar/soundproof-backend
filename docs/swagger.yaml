basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      signature:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Soundproof service API in Go using Gin framework
  title: Soundproof API
  version: "1.0"
paths:
  /auth/login:
    post:
      description: Takes a User JSON and store in DB. Return message.
      parameters:
      - description: User JSON
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Log a new user in
      tags:
      - users
  /auth/signup:
    post:
      description: Takes a User JSON and store in DB. Return message.
      parameters:
      - description: User JSON
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Create a new user
      tags:
      - users
  /user/{id}:
    put:
      consumes:
      - application/json
      description: Updates the profile information of a user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User profile details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Update user profile
      tags:
      - users
  /user/{userId}:
    get:
      description: Returns the user whose ID value matches the userId.
      parameters:
      - description: search user by userId
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get single user by ID
      tags:
      - users
swagger: "2.0"
